{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/api.js","webpack://mesto-project-ff/./src/components/card.js","webpack://mesto-project-ff/./src/components/modal.js","webpack://mesto-project-ff/./src/components/config.js","webpack://mesto-project-ff/./src/components/validation.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const config = {\r\n  baseUrl: \"https://nomoreparties.co/v1/wff-cohort-5\",\r\n  headers: {\r\n    authorization: \"87c8aa25-04d0-4103-a6d9-c45510e9c4e5\",\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n};\r\n\r\nfunction handleResponse(res) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n}\r\n\r\nexport function userInfo() {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n    },\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function getCard() {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n    },\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function userEdit(user) {\r\n  return fetch(`${config.baseUrl}/users/me`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      name: user.name,\r\n      about: user.about,\r\n    }),\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function newCardAddServer(card) {\r\n  return fetch(`${config.baseUrl}/cards`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      name: card.name,\r\n      link: card.link,\r\n    }),\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function deleteCard(id) {\r\n  return fetch(`${config.baseUrl}/cards/${id}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n    },\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function pushLikeCard(id) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n    },\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function delLikeCard(id) {\r\n  return fetch(`${config.baseUrl}/cards/likes/${id}`, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  }).then(handleResponse);\r\n}\r\n\r\nexport function editUserAvatar(linkImgAvatar) {\r\n  return fetch(`${config.baseUrl}/users/me/avatar`, {\r\n    method: \"PATCH\",\r\n    headers: {\r\n      authorization: config.headers.authorization,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({\r\n      avatar: linkImgAvatar,\r\n    }),\r\n  }).then(handleResponse);\r\n}\r\n","import { deleteCard, pushLikeCard, delLikeCard } from \"../api.js\";\r\n// import { openModal } from \"../components/modal.js\"\r\n\r\n// @todo: Темплейт карточки\r\nexport const articleTemplate = document.querySelector(\"#card-template\").content;\r\n\r\n// @todo: Функция создания карточки\r\nexport function createCard(cardData, likeCard, openImageModal, currentUserID, showModalDel, cardToRemoveid, cardToRemoveElement) {\r\n  const cardElement = articleTemplate.querySelector(\".card\").cloneNode(true);\r\n  const deleteButton = cardElement.querySelector(\".card__delete-button\");\r\n  const likeButton = cardElement.querySelector(\".card__like-button\");\r\n  const cardImage = cardElement.querySelector(\".card__image\");\r\n  const likeCounter = cardElement.querySelector(\".like-counter\");\r\n\r\n  if (currentUserID === cardData.userId) {\r\n    deleteButton.style.display = \"block\";\r\n    deleteButton.addEventListener(\"click\", function () {\r\n      cardToRemoveid = cardData.id;\r\n      cardToRemoveElement = cardElement;\r\n      showModalDel(cardData.id, cardToRemoveElement);\r\n    });\r\n  } else {\r\n    deleteButton.style.display = \"none\";\r\n  }\r\n\r\n  cardImage.src = cardData.link;\r\n  cardImage.alt = cardData.name;\r\n  cardImage.id = cardData.id;\r\n  likeCounter.textContent = cardData.likes.length;\r\n\r\n  if (cardData.likes.some((element) => element._id === currentUserID)) {\r\n    likeButton.classList.add(\"card__like-button_is-active\");\r\n  }\r\n\r\n  cardElement.querySelector(\".card__title\").textContent = cardData.name;\r\n  cardImage.addEventListener(\"click\", openImageModal);\r\n  likeButton.addEventListener(\"click\", function () {\r\n    likeCard(cardData.id, likeCounter, likeButton);\r\n  });\r\n\r\n  return cardElement;\r\n}\r\n\r\n// @todo: Функция удаления карточки\r\nexport function removeCard(id) {\r\n  return deleteCard(id)\r\n    .then(() => {\r\n      document.querySelector(\".card\").remove();\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    });\r\n}\r\n\r\n//функция лайка\r\nexport function likeCard(id, likeCounter, likeButton) {\r\n  if (!likeButton.classList.contains(\"card__like-button_is-active\")) {\r\n    pushLikeCard(id)\r\n      .then((data) => {\r\n        likeButton.classList.add(\"card__like-button_is-active\");\r\n        likeCounter.textContent = Object.keys(data.likes).length;\r\n      })\r\n      .catch((error) => {\r\n        console.log(`Ошибка: ${error.message}`);\r\n      });\r\n  } else if (likeButton.classList.contains(\"card__like-button_is-active\")) {\r\n    delLikeCard(id)\r\n      .then((data) => {\r\n        likeButton.classList.remove(\"card__like-button_is-active\");\r\n        likeCounter.textContent = Object.keys(data.likes).length;\r\n      })\r\n      .catch((error) => {\r\n        console.log(`Ошибка: ${error.message}`);\r\n      });\r\n  }\r\n}\r\n","// Функция открытия модального окна\r\nexport function openModal(popup) {\r\n  popup.classList.add(\"popup_is-animated\");\r\n  setTimeout(() => {\r\n    popup.classList.add(\"popup_is-opened\");\r\n  }, 0);\r\n  document.addEventListener(\"keydown\", closeModalEsc);\r\n}\r\n\r\n// Функция закрытия модального окна\r\nexport function closeModal(popup) {\r\n  popup.classList.remove(\"popup_is-opened\");\r\n  document.removeEventListener(\"keydown\", closeModalEsc);\r\n}\r\n\r\n// Функция закрытия модального окна по ESC\r\nexport function closeModalEsc(event) {\r\n  if (event.key === \"Escape\") {\r\n    closeModal(document.querySelector(\".popup_is-opened\"));\r\n  }\r\n}\r\n","//объект с селекторами и классами\r\nexport const config = {\r\n  formSelector: \".popup__form\",\r\n  inputSelector: \".popup__input\",\r\n  submitButtonSelector: \".popup__button\",\r\n  formSetSelector: \".form__set\",\r\n  inactiveButtonClass: \"popup__button_disabled\",\r\n  inputErrorClass: \"popup__input_type_error\",\r\n  errorClass: \"popup__error_visible\",\r\n};\r\n","export { clearValidation, enableValidation };\r\nimport { config } from \"./config\";\r\n\r\nfunction clearValidation(formElement) {\r\n  //функция очистки полей ошибки\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector);\r\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector)); //создаю массив из всех полей ввода\r\n  inputList.forEach((inputElement) => {\r\n    //прохожусь по ним и для каждого элемента\r\n    hideInputError(formElement, inputElement); //скрываю ошибку\r\n    disableSubmitButton(buttonElement, config, true); //дизейблю кнопку\r\n  });\r\n}\r\n\r\nfunction showInputError(formElement, inputElement, errorMessage) {\r\n  //функция показа ошибки, принимает форму, поле формы и сообщение об ошибке\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`); //поиск элемента, предназначенного для отображения сообщения об ошибке\r\n  inputElement.classList.add(config.inputErrorClass); //добавляю класс со стиялми для подсветки поля ввода как недопустимого или с ошибкой.\r\n  errorElement.classList.add(config.errorClass); //добавляю класс со стилями для отображения сообщения об ошибке.\r\n  errorElement.textContent = errorMessage; //устанавливаю текст сообщения об ошибке (errorMessage) внутри элемента ошибки\r\n}\r\n\r\nfunction hideInputError(formElement, inputElement) {\r\n  //функция скрытия ошибки, принимает форму и поле формы\r\n  const errorElement = formElement.querySelector(`.${inputElement.id}-error`); //поиск элемента, предназначенного для отображения сообщения об ошибке\r\n  inputElement.classList.remove(config.inputErrorClass); //убираю класс со стилями для подсветки поля ввода как недопустимого или с ошибкой.\r\n  errorElement.classList.remove(config.errorClass); //убираю класс со стилями для отображения сообщения об ошибке.\r\n  errorElement.textContent = \"\"; //устанавливаю пустую строку внутри элемента ошибки\r\n}\r\n\r\nfunction checkInputValidity(formElement, inputElement) {\r\n  //функция для проверки валидности введенных данных в текстовом поле формы\r\n  if (inputElement.validity.patternMismatch) {\r\n    // проверка наличия несоответствий шаблону (pattern)\r\n    inputElement.setCustomValidity(inputElement.dataset.errorMessage); // Если есть несоответствие, устанавливаем data сообщение об ошибке\r\n  } else {\r\n    inputElement.setCustomValidity(\"\"); // Если нет несоответствий, сбрасываем пользовательское сообщение\r\n  }\r\n\r\n  if (!inputElement.validity.valid) {\r\n    // Проверка общей валидности поля\r\n    showInputError(formElement, inputElement, inputElement.validationMessage); // Если поле невалидно, вызываем функцию отображения ошибки\r\n  } else {\r\n    hideInputError(formElement, inputElement); // Если поле валидно, вызываем функцию скрытия ошибки\r\n  }\r\n}\r\n\r\nfunction setEventListeners(formElement) {\r\n  //настройка обработчиков событий валидации для формы\r\n  const inputList = Array.from(formElement.querySelectorAll(config.inputSelector)); //создаю массив inputList, который содержит все поля формы\r\n  const buttonElement = formElement.querySelector(config.submitButtonSelector); //элемент кнопки в форме с классом popup__button.\r\n  disableSubmitButton(buttonElement, config, true); //вызов функции проверки валидности кнопки\r\n  inputList.forEach((inputElement) => {\r\n    //устанавливаю обработчик события input для каждого элемента в массиве inputList.\r\n    inputElement.addEventListener(\"input\", function () {\r\n      checkInputValidity(formElement, inputElement); //проверяю валидность конкретного поля ввода и обновдяю сообщение об ошибке, если необходимо.\r\n      toggleButtonState(inputList, buttonElement, config); //вызов функции проверки валидности кнопки\r\n    });\r\n  });\r\n}\r\n\r\nfunction enableValidation(config) {\r\n  //включения валидации форм на странице.\r\n  const formList = Array.from(document.querySelectorAll(config.formSelector)); //массив formList, содержащий все элементы форм на странице\r\n  formList.forEach((formElement) => {\r\n    //на каждую форму в массиве вешаю обработчик сабмит и убираю стандарное поведение браузера\r\n    formElement.addEventListener(\"submit\", (evt) => {\r\n      evt.preventDefault();\r\n    });\r\n    const fieldsetList = Array.from(formElement.querySelectorAll(config.formSetSelector)); //создаю массив fieldsetList для всех элементов формы на странице\r\n    fieldsetList.forEach((fieldSet) => {\r\n      setEventListeners(fieldSet); //для каждого fieldSet вызывается функция обработчика для полей ввода\r\n    });\r\n    setEventListeners(formElement); //вызываю функцию для текущей формы, устанавливая обработчики событий для всех полей ввода внутри нее.\r\n  });\r\n}\r\n\r\nfunction hasInvalidInput(inputList) {\r\n  //проверяю массив элементов ввода на наличие хотя бы одного невалидного элемента.\r\n  return inputList.some((input) => {\r\n    //прохожусь методом some по каждому импуту.\r\n    return !input.validity.valid; //возвращаю true, если хотя бы один не валиден\r\n  });\r\n}\r\n\r\nfunction toggleButtonState(inputList, buttonElement, config) {\r\n  //функция изменяет состояние кнопки\r\n  if (hasInvalidInput(inputList)) {\r\n    //если хотя бы одно поле не валидно\r\n    disableSubmitButton(buttonElement, config, true);\r\n  } else {\r\n    disableSubmitButton(buttonElement, config, false);\r\n  }\r\n}\r\n\r\nfunction disableSubmitButton(button, config, disabled) {\r\n  if (disabled === true) {\r\n    button.classList.add(config.inactiveButtonClass);\r\n    button.disabled = disabled;\r\n  } else {\r\n    button.classList.remove(config.inactiveButtonClass);\r\n    button.disabled = disabled;\r\n  }\r\n}","// Импорты\r\nimport \"./pages/index.css\";\r\nimport { createCard, removeCard, likeCard } from \"./components/card.js\";\r\nimport { openModal, closeModal } from \"./components/modal.js\";\r\nimport { clearValidation, enableValidation } from \"./components/validation.js\";\r\nimport { userInfo, getCard, userEdit, newCardAddServer, editUserAvatar } from \"./api.js\";\r\nimport { config } from \"./components/config.js\";\r\n\r\n// @todo: DOM узлы\r\nconst placesList = document.querySelector(\".places__list\"); //список карточек\r\n//нахожу все элементы с классом попап\r\nconst popups = document.querySelectorAll(\".popup\");\r\n//попапы\r\nconst popupTypeEdit = document.querySelector(\".popup_type_edit\"); //попап редактирования профиля\r\nconst popupTypeNewCard = document.querySelector(\".popup_type_new-card\"); //попап добавления новой карточки\r\nconst popupTypeImage = document.querySelector(\".popup_type_image\"); //попап фулскрин фото карточки\r\nconst popupDeleteImage = document.querySelector(\".popup_delete_image\"); //попап удаления карточки (подтверждение)\r\nconst popupTypeEditAvatar = document.querySelector(\".popup_type_edit-avatar\"); //попап редактирования аватара\r\n//кнопки их открытия\r\nconst profileEditButton = document.querySelector(\".profile__edit-button\"); //кнопка редактирования профиля\r\nconst profileAddButton = document.querySelector(\".profile__add-button\"); //кнопка добавления карточки\r\n//наполнение карточки\r\nconst popupImagePopup = document.querySelector(\".popup__image\"); //изображение в попапе\r\nconst popupCaptionPopup = document.querySelector(\".popup__caption\"); //текст города в карточке\r\n//текстовые поля в шапке профиля\r\nconst profileTitle = document.querySelector(\".profile__title\");\r\nconst profileDescription = document.querySelector(\".profile__description\");\r\nconst profileImage = document.querySelector(\".profile__image\");\r\n//форма редактирования данных\r\nconst editProfileForm = document.forms[\"edit-profile\"];\r\n//форма добавления новой карточки\r\nconst addCardForm = document.forms[\"new-place\"];\r\n//поля формы редактирования данных\r\nconst popupInputTypeName = document.querySelector(\".popup__input_type_name\");\r\nconst popupInputTypeDescription = document.querySelector(\".popup__input_type_description\");\r\n//поле ввода ссылки для редактирования аватара профиля\r\nconst popupInputTypeAvatar = document.querySelector(\".popup__input_type_avatar\");\r\nconst popupAcceptButton = document.querySelector(\".popup__accept-button\");\r\n//переменные id юзера, карточки и карточки в разметке\r\nlet currentUserID;\r\nlet cardToRemoveid;\r\nlet cardToRemoveElement;\r\n\r\nenableValidation(config); //вызываю функцию валидации форм на странице.\r\n\r\nPromise.all([userInfo(), getCard()])\r\n  .then(([userData, cardData]) => {\r\n    currentUserID = userData._id;\r\n    profileTitle.textContent = userData.name;\r\n    profileDescription.textContent = userData.about;\r\n    profileImage.style.backgroundImage = `url(${userData.avatar})`;\r\n\r\n    cardData.forEach(function (element) {\r\n      const cardData = {\r\n        name: element.name,\r\n        link: element.link,\r\n        likes: element.likes,\r\n        id: element._id,\r\n        userId: element.owner._id,\r\n      };\r\n\r\n      placesList.append(createCard(cardData, likeCard, openImagePopup, currentUserID, showModalDel, cardToRemoveid, cardToRemoveElement));\r\n    });\r\n  })\r\n  .catch((error) => {\r\n    console.log(`Ошибка: ${error.message}`);\r\n  });\r\n\r\n//функция изменения полей формы\r\nfunction handleProfileFormSubmit(event) {\r\n  event.preventDefault(); //отменяю стандартное поведение браузера\r\n  const buttonAssept = event.target.querySelector(\".popup__button\");\r\n  setLoadingSave(true, buttonAssept);\r\n  popupInputTypeName.value = event.target.elements.name.value; //получаю значение (value) из поля name\r\n  popupInputTypeDescription.value = event.target.elements.description.value; //получаю значение (value) из поля description\r\n\r\n  const user = {\r\n    name: popupInputTypeName.value,\r\n    about: popupInputTypeDescription.value,\r\n  };\r\n  userEdit(user)\r\n    .then((data) => {\r\n      profileTitle.textContent = data.name;\r\n      profileDescription.textContent = data.about;\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    })\r\n    .finally(() => {\r\n      setLoadingSave(false, buttonAssept);\r\n    });\r\n\r\n  profileTitle.textContent = popupInputTypeName.value; //присваиваю текстовому значению profileTitle то, что будет в поле popupInputTypeName.value\r\n  profileDescription.textContent = popupInputTypeDescription.value; //присваиваю текстовому значению profileDescription то, что будет в поле popupInputTypeDescription.value\r\n  closeModal(popupTypeEdit); //закрываю попап\r\n}\r\n\r\n//обработчик события submit\r\neditProfileForm.addEventListener(\"submit\", handleProfileFormSubmit);\r\n\r\n//Функция смены аватара юзера\r\nfunction updateAvatar(event) {\r\n  event.preventDefault();\r\n  const buttonAsseptSave = event.target.querySelector(\".popup__button\");\r\n  setLoadingSave(true, buttonAsseptSave);\r\n\r\n  const linkImgAvatar = popupInputTypeAvatar.value;\r\n\r\n  editUserAvatar(linkImgAvatar)\r\n    .then((link) => {\r\n      profileImage.style.backgroundImage = `url(${link.avatar})`;\r\n      closeModal(popupTypeEditAvatar);\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    })\r\n    .finally(() => {\r\n      setLoadingSave(false, buttonAsseptSave);\r\n    });\r\n}\r\n\r\n//Ловлю клик по иконке аватара\r\nprofileImage.addEventListener(\"click\", function () {\r\n  openModal(popupTypeEditAvatar);\r\n});\r\n\r\n//отправляю сабмит по кнопке и обновляю аватар\r\npopupTypeEditAvatar.addEventListener(\"submit\", updateAvatar);\r\n\r\n//Функция добавление новой карточки из формы\r\nfunction addNewCard(event) {\r\n  event.preventDefault(); //отменяю стандартное поведение браузера\r\n  const buttonSave = event.target.querySelector(\".popup__button\");\r\n  setLoadingSave(true, buttonSave);\r\n  const titleInput = addCardForm.elements[\"place-name\"].value; //получаю значение из поля title\r\n  const linkInput = addCardForm.elements[\"link\"].value; //получаю значение из поля link\r\n\r\n  const card = {\r\n    name: titleInput,\r\n    link: linkInput,\r\n  };\r\n  newCardAddServer(card)\r\n    .then((data) => {\r\n      const cardData = {\r\n        name: data.name,\r\n        link: data.link,\r\n        likes: data.likes,\r\n        id: data._id,\r\n        userId: data.owner._id,\r\n      };\r\n      const newCards = createCard(cardData, likeCard, openImagePopup, currentUserID, showModalDel, cardToRemoveid, cardToRemoveElement); //создаю новую карточку и кладу в функцию создания всех карточек + атрибуты\r\n      placesList.prepend(newCards); //добавляю карточку в начало списка карточек\r\n      addCardForm.reset(); //сбрасываю форму\r\n      closeModal(popupTypeNewCard); //закрываю модальное окно\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    })\r\n    .finally(() => {\r\n      setLoadingSave(false, buttonSave);\r\n    });\r\n}\r\n\r\naddCardForm.addEventListener(\"submit\", addNewCard); //вешаю обработчик с функцией добавления новой карточки\r\n\r\n//обработчик клика по оверлею и крестику\r\npopups.forEach((popup) => {\r\n  //прохожусь массивом по каждому\r\n  popup.addEventListener(\"mousedown\", (event) => {\r\n    //на каждый найденный элемент попап вешаю событие клика НАД элементом\r\n    if (event.target.classList.contains(\"popup_is-opened\") || event.target.classList.contains(\"popup__close\")) {\r\n      //проверяю, есть ли в элементе события класс\r\n      closeModal(popup); //если есть закрываю окно\r\n    }\r\n  });\r\n});\r\n\r\n//отслеживаю клик по кнопке попапа редактирования профиля и открываю его через функцию\r\nprofileEditButton.addEventListener(\"click\", function () {\r\n  popupInputTypeName.value = profileTitle.textContent; //по умолчанию ставлю в поля формы значение из поля профиля\r\n  popupInputTypeDescription.value = profileDescription.textContent; //и дискрипшна\r\n  clearValidation(popupTypeEdit); //скрываю прошлые ошибки валидации\r\n  openModal(popupTypeEdit);\r\n});\r\n\r\n//отслеживаю клик по кнопке попапа добавления новой карточки и открываю его через функцию\r\nprofileAddButton.addEventListener(\"click\", function () {\r\n  openModal(popupTypeNewCard);\r\n});\r\n\r\npopupTypeImage.addEventListener(\"click\", function () {\r\n  openModal(popupTypeImage);\r\n});\r\n\r\n// Функция открытия фото карточки Fullscreen\r\nexport function openImagePopup(event) {\r\n  const clickedCard = event.target.closest(\".card\"); //кликнутая карточка (общий класс)\r\n  const clickedImage = clickedCard.querySelector(\".card__image\"); //картинка карточки\r\n  const clickedTitle = clickedCard.querySelector(\".card__title\"); //элемент с текстом\r\n  if (event.target === clickedImage) {\r\n    popupImagePopup.src = clickedImage.src; //src в попапе = scr в списке карточек\r\n    popupImagePopup.alt = clickedImage.alt; //alt в img попапа = alt в img картинки\r\n    popupCaptionPopup.textContent = clickedTitle.textContent; //текст под карточкой\r\n    openModal(popupTypeImage); //вызвать функцию открытия модельного окна с атрибутом попапа фулскрина\r\n  }\r\n}\r\n\r\npopupAcceptButton.addEventListener(\"click\", () => {\r\n  removeCard(cardToRemoveid, cardToRemoveElement)\r\n    .then(() => {\r\n      cardToRemoveElement.remove();\r\n      closeModal(popupDeleteImage);\r\n    })\r\n    .catch((error) => {\r\n      console.log(`Ошибка: ${error.message}`);\r\n    });\r\n});\r\n\r\n// функция открытия попапа с подтверждением удаления карточки\r\nexport function showModalDel(idCard, eventElement) {\r\n  openModal(popupDeleteImage);\r\n  cardToRemoveid = idCard;\r\n  cardToRemoveElement = eventElement;\r\n}\r\n\r\n//Функция изменения надписи в кнопке\r\nfunction setLoadingSave(loading, buttonPopup) {\r\n  buttonPopup.textContent = loading ? \"Сохранение...\" : \"Сохранить\";\r\n}"],"names":["config","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","articleTemplate","document","querySelector","content","createCard","cardData","likeCard","openImageModal","currentUserID","showModalDel","cardToRemoveid","cardToRemoveElement","cardElement","cloneNode","deleteButton","likeButton","cardImage","likeCounter","userId","style","display","addEventListener","id","src","link","alt","name","textContent","likes","length","some","element","_id","classList","add","contains","fetch","method","headers","then","delLikeCard","data","remove","Object","keys","catch","error","console","log","message","pushLikeCard","openModal","popup","setTimeout","closeModalEsc","closeModal","removeEventListener","event","key","formSelector","inputSelector","submitButtonSelector","formSetSelector","inactiveButtonClass","inputErrorClass","errorClass","hideInputError","formElement","inputElement","errorElement","setEventListeners","inputList","Array","from","querySelectorAll","buttonElement","disableSubmitButton","forEach","validity","patternMismatch","setCustomValidity","dataset","errorMessage","valid","showInputError","validationMessage","checkInputValidity","input","hasInvalidInput","toggleButtonState","button","disabled","placesList","popups","popupTypeEdit","popupTypeNewCard","popupTypeImage","popupDeleteImage","popupTypeEditAvatar","profileEditButton","profileAddButton","popupImagePopup","popupCaptionPopup","profileTitle","profileDescription","profileImage","editProfileForm","forms","addCardForm","popupInputTypeName","popupInputTypeDescription","popupInputTypeAvatar","popupAcceptButton","openImagePopup","clickedCard","target","closest","clickedImage","clickedTitle","idCard","eventElement","setLoadingSave","loading","buttonPopup","evt","preventDefault","fieldSet","enableValidation","all","_ref","_ref2","userData","about","backgroundImage","avatar","owner","append","user","buttonAssept","value","elements","description","body","JSON","stringify","finally","linkImgAvatar","buttonAsseptSave","card","buttonSave","newCards","prepend","reset","deleteCard"],"sourceRoot":""}